version: 2.1

parameters:
  base_executor_image_tag:
    type: string
    default: latest

  e2e_environment_executor_image_tag:
    type: string
    default: latest

  working_directory:
    type: string
    default: ~/src

  pnpm_cache_key:
    type: string
    default: raiden-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}

anchor_1: &attach_options
  at: << pipeline.parameters.working_directory >>

anchor_2: &executor_parameter
  parameters:
    executor:
      type: executor
      default: base-executor

anchor_4: &run_on_release_tag_only
  filters:
    tags:
      only: /^v\d+\.\d+\.\d+$/
    branches:
      ignore: /.*/

executors:
  base-executor:
    working_directory: << pipeline.parameters.working_directory >>
    docker:
      - image: raidennetwork/lightclient-node-pnpm:<< pipeline.parameters.base_executor_image_tag >>

  e2e-environment-executor:
    working_directory: << pipeline.parameters.working_directory >>
    docker:
      - image: raidennetwork/lightclient-e2e-environment:<< pipeline.parameters.e2e_environment_executor_image_tag >>

jobs:
  install:
    <<: *executor_parameter
    executor: << parameters.executor >>
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - restore_cache:
          key: << pipeline.parameters.pnpm_cache_key >>
      - run: pnpm install --prefer-frozen-lockfile
      - save_cache:
          key: << pipeline.parameters.pnpm_cache_key >>
          paths:
            - ~/.pnpm-store
            - ~/.cache # Cypress stores its stuff here.
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./*

  check_licenses:
    executor: base-executor
    working_directory: ~/
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Update $PATH
          command: echo 'export PATH=$PATH:$HOME/node_modules/.bin' >> $BASH_ENV
      - run:
          name: Install license checker
          command: npm install license-checker@25.0.1
      - run:
          name: Check SDK Licenses
          working_directory: raiden-ts
          command: license-checker --production --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense' --excludePackages 'uuid@2.0.1' --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT
      - run:
          name: Check dApp Licenses
          working_directory: raiden-dapp
          command: license-checker --production --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense' --excludePackages 'uuid@2.0.1' --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT
      - run:
          name: Check CLI Licenses
          working_directory: raiden-cli
          command: license-checker --production --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense' --excludePackages 'uuid@2.0.1' --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT

  lint:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run: pnpm run lint --recursive

  test_sdk_unit:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: pnpm run test:unit --filter raiden-ts -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: bash <(curl -s https://codecov.io/bash) -F sdk_unit -F sdk -C $CIRCLE_SHA1

  test_sdk_integration:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: pnpm run test:integration --filter raiden-ts -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: bash <(curl -s https://codecov.io/bash) -F sdk_integration -F sdk -C $CIRCLE_SHA1

  test_dapp_unit:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: pnpm run test:unit --filter raiden-dapp -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: bash <(curl -s https://codecov.io/bash) -F dapp -C $CIRCLE_SHA1

  test_dapp_e2e:
    executor: e2e-environment-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run e2e tests
          command: pnpm run test:e2e --filter raiden-dapp -- --headless
      - store_test_results:
          path: raiden-dapp/tests/e2e/results/reports
      - store_artifacts:
          path: raiden-dapp/tests/e2e/results/videos
      - store_artifacts:
          path: raiden-dapp/tests/e2e/results/screenshots

  build_sdk:
    <<: *executor_parameter
    executor: << parameters.executor >>
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run: pnpm run build --filter raiden-ts
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./*

  build_dapp:
    parameters:
      mode:
        description: Mode to configure the environment of the dApp build
        type: enum
        enum: ["production", "staging", "development", "e2e", "raiden-package"]
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Build dapp
          command: pnpm run build --filter raiden-dapp -- --mode << parameters.mode >>
      - run:
          name: Compress dapp
          working_directory: raiden-dapp
          command: tar -czvf dapp.tar.gz dist
      - store_artifacts:
          path: raiden-dapp/dapp.tar.gz
          destination: dapp.tar.gz
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./*

  build_cli:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Build CLI
          command: pnpm run build --filter raiden-cli && pnpm run build:bundle --filter raiden-cli
      - run:
          name: Compress CLI bundle
          working_directory: raiden-cli
          command: >
            cp -av ./raiden bundle/ ;
            tar -czvf raiden-cli.tar.gz bundle --transform='s/^bundle/raiden-cli/'
      - store_artifacts:
          path: raiden-cli/raiden-cli.tar.gz
          destination: raiden-cli.tar.gz

  generate_documentation:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          working_directory: docs
          command: ./generate_documentation.sh
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./raiden-dapp/dist/docs

  deploy_gh_pages:
    parameters:
      public_path:
        description: The public path where to reach deployment (must be correct according to the build mode)
        type: string
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-dapp
    steps:
      - attach_workspace: *attach_options
      - add_ssh_keys:
          fingerprints:
            - "ed:c9:40:2a:96:6c:90:fd:46:18:2d:bf:8d:a8:a9:b3"
      - run: ./deploy.sh << parameters.public_path >>

  publish_artifact:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
      - run:
          name: Publish on npm
          command: pnpm publish --no-git-checks --filter raiden-ts

  test_sdk_e2e:
    executor: e2e-environment-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run end-to-end tests
          command: >
            source /etc/profile.d/smartcontracts.sh &&
            pnpm run test:e2e --filter raiden-ts --
            --ci --runInBand --forceExit
            --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: bash <(curl -s https://codecov.io/bash) -F sdk_e2e -F sdk -C $CIRCLE_SHA1

workflows:
  version: 2
  default_workflow:
    jobs:
      - install:
          filters:
            branches:
              ignore:
                - master
      - check_licenses:
          requires:
            - install
      - build_sdk:
          requires:
            - install
      - lint:
          requires:
            - build_sdk
      - build_dapp:
          mode: development
          requires:
            - build_sdk
      - build_cli:
          requires:
            - build_sdk
      - test_sdk_unit:
          requires:
            - build_sdk
      - test_sdk_integration:
          requires:
            - build_sdk
      - test_dapp_unit:
          requires:
            - build_dapp

  publish_staging:
    jobs:
      - install:
          filters:
            branches:
              only:
                - master
      - build_sdk:
          requires:
            - install
      - build_dapp:
          mode: staging
          requires:
            - build_sdk
      - test_sdk_unit:
          requires:
            - build_sdk
      - test_sdk_integration:
          requires:
            - build_sdk
      - test_dapp_unit:
          requires:
            - build_dapp
      - deploy_gh_pages:
          public_path: /staging
          requires:
            - build_dapp

  publish_production:
    jobs:
      - install:
          <<: *run_on_release_tag_only
      - build_sdk:
          <<: *run_on_release_tag_only
          requires:
            - install
      - build_dapp:
          <<: *run_on_release_tag_only
          mode: production
          requires:
            - build_sdk
      - generate_documentation:
          <<: *run_on_release_tag_only
          requires:
            - build_dapp
      - deploy_gh_pages:
          <<: *run_on_release_tag_only
          public_path: /
          requires:
            - generate_documentation
      - publish_artifact:
          <<: *run_on_release_tag_only
          context: "Raiden Context"
          requires:
            - deploy_gh_pages

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - install:
          executor: e2e-environment-executor
      - build_sdk:
          executor: e2e-environment-executor
          requires:
            - install
      - test_sdk_e2e:
          requires:
            - build_sdk
      - test_dapp_e2e:
          requires:
            - build_sdk
